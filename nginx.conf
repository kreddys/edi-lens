# /nginx.conf

# Use user nobody to avoid running as root
user nobody;
# Set number of worker processes automatically based on number of CPU cores.
worker_processes auto;
# Enables the use of JIT compilation for regular expressions to speed-up processing.
pcre_jit on;
# Configures default error logger.
error_log /dev/stderr warn;
# Includes files with directives to load dynamic modules.
include /etc/nginx/modules/*.conf;

# Provides the configuration file context in which the directives that affect connection processing are specified.
events {
    # Sets the maximum number of simultaneous connections that can be opened by a worker process.
    worker_connections 1024;
}

http {
    # Includes mapping of file name extensions to MIME types of responses.
    include /etc/nginx/mime.types;
    # Specifies the default MIME type of a response.
    default_type application/octet-stream;
    # How long to allow connections to stay open.
    keepalive_timeout 65s;
    # Sendfile copies data between one FD and other from within the kernel.
    # More efficient than read() + write().
    sendfile on;
    # Causes nginx to attempt to send its HTTP response head in one packet,
    # instead of using partial frames.
    # Helpful for pipelines.
    tcp_nopush on;
    # Enable gzipping of responses.
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied expired no-cache no-store private auth;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml application/javascript application/json;

    # Define the server block for our application
    server {
        # Nginx will listen on this port inside the container.
        # Fly.io typically forwards external port 80/443 to internal port 8080.
        listen 8080;

        # Set the root directory for requests.
        root /usr/share/nginx/html;

        # Specifies the index file to serve.
        index index.html;

        # Handle routing for Single Page Applications (SPAs) like React.
        # Try to serve the requested file directly ($uri).
        # If it's a directory, try serving the index file inside it ($uri/).
        # If neither exists, fall back to serving /index.html.
        # This allows React Router to handle the route.
        location / {
            try_files $uri $uri/ /index.html;
        }

        # Optional: Improve caching for static assets
        location ~* \.(?:css|js|jpg|jpeg|gif|png|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public";
        }
    }
}